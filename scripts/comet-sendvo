#!/usr/bin/python

# VOEvent sender.
# John Swinbank, <swinbank@transientskp.org>, 2012.

# Python standard library
import sys

# Twisted
from twisted.python import log
from twisted.python import usage
from twisted.internet import reactor
from twisted.internet.endpoints import clientFromString

# VOEvent transport protocol
from comet.tcp.protocol import VOEventSenderFactory

# Encapsulation of event
from comet.utility.xml import xml_document
import lxml.etree as ElementTree

class Options(usage.Options):
    optParameters = [
        ["host", "h", "localhost", "Host to send to."],
        ["port", "p", 8098, "Port to send to."],
        ["file", "f", "-", "Where to read XML text to send."]
    ]

    def postOptions(self):
        self["port"] = int(self["port"])

class OneShotSender(VOEventSenderFactory):
    def clientConnectionLost(self, connector, reason):
        reactor.stop()
    def clientConnectionFailed(self, connector, reason):
        log.err("Connection failed")
        reactor.stop()

if __name__ == "__main__":
    config = Options()
    config.parseOptions()

    log.startLogging(sys.stdout)
    if config["file"] == "-":
        f = sys.stdin
    else:
        f = open(config["file"])
    try:
        xmldoc = xml_document(f.read())
        reactor.connectTCP(
            config['host'],
            config['port'],
            OneShotSender(xmldoc)
        )
    except IOError:
        log.msg("Reading XML document failed")
        reactor.callWhenRunning(reactor.stop)
    except ElementTree.Error:
        log.msg("Could not parse event text")
        reactor.callWhenRunning(reactor.stop)
    finally:
        f.close()
    reactor.run()
