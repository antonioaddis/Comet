#!/usr/bin/env python

# VOEvent sender.
# John Swinbank, <swinbank@transientskp.org>.

# Python standard library
import sys

# Twisted
from twisted.python.log import startLogging
from twisted.python import usage
from twisted.internet import reactor
from twisted.internet.endpoints import clientFromString

# VOEvent transport protocol
from comet.utility.options import BaseOptions
from comet.tcp.protocol import VOEventSenderFactory

# Encapsulation of event
from comet.utility import log
from comet.utility.xml import xml_document
import lxml.etree as ElementTree

class Options(BaseOptions):
    optParameters = [
        ["host", "h", "localhost", "Host to send to."],
        ["port", "p", 8098, "Port to send to.", int],
        ["file", "f", "-", "Where to read XML text (- is stdin)."],
        ["sign", "s", None, "Sign event. Requires argument <key_id>:<passphrase_file>."]
    ]

    def opt_sign(self, argument):
        self["key"], self["passphrase-file"] = argument.split(":")


class OneShotSender(VOEventSenderFactory):
    """
    A factory that shuts down the reactor when we lose the connection to the
    remote host. That either means that our event has been sent or that we
    failed.
    """
    def clientConnectionLost(self, connector, reason):
        reactor.stop()

    def clientConnectionFailed(self, connector, reason):
        log.warning("Connection failed")
        reactor.stop()

if __name__ == "__main__":
    startLogging(sys.stdout)
    config = Options()
    config.parseOptions()


    if config["file"] == "-":
        f = sys.stdin
    else:
        f = open(config["file"])

    voevent = xml_document(f.read())
    if "key" in config and "passphrase" in config:
        voevent.sign(config["passphrase"], config["key"])

    try:
        factory = OneShotSender(voevent)
    except IOError:
        log.warning("Reading XML document failed")
        reactor.callWhenRunning(reactor.stop)
    except ElementTree.Error:
        log.warning("Could not parse event text")
        reactor.callWhenRunning(reactor.stop)
    else:
        reactor.connectTCP(config['host'], config['port'], factory)
    finally:
        f.close()

    reactor.run()

    # If our factory didn't get an acknowledgement of receipt, we'll exit with
    # status 1.
    if locals().has_key("factory") and factory.ack:
        sys.exit(0)
    else:
        sys.exit(1)
