#!/usr/bin/env python

# Comet VOEvent Broker.
# Event sender.

# Python standard library
import sys

# Twisted
from twisted.internet import task
from twisted.internet.endpoints import clientFromString, connectProtocol
from twisted.python import usage
from twisted.python.log import startLogging
from twisted.python.failure import Failure

# VOEvent transport protocol
from comet.protocol.sender import VOEventSender

# Encapsulation of event
from comet.utility import xml_document

class Options(usage.Options):
    optParameters = [
        ["host", "h", "localhost", "Host to send to."],
        ["port", "p", 8098, "Port to send to.", int],
        ["file", "f", "-", "Where to read XML text to send (- is stdin)."]
    ]

def read_event(filename):
    # We handle the input data in binary mode, as we don't want to change the
    # encoding that has already been applied to the event text.
    if config["file"] == "-":
        f = sys.stdin.buffer
    else:
        f = open(config["file"], 'r+b')

    try:
        return xml_document(f.read())
    finally:
        f.close()

def send_event(reactor, host, port, event):
    def gotProtocol(p):
        def fail_on_nak(incoming):
            if incoming.element.get('role') == 'nak':
                return Failure(Exception("Remote refused event."))
        return p.send_event(event).addCallback(fail_on_nak)

    ep = clientFromString(reactor, f"tcp:{host}:{port}")
    d = connectProtocol(ep, VOEventSender())
    return d.addCallback(gotProtocol)

if __name__ == "__main__":
    config = Options()
    config.parseOptions()
    startLogging(sys.stdout)
    event = read_event(config['file'])
    task.react(send_event, (config['host'], config['port'], event))
